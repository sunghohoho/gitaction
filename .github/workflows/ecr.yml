name: Dockerizing to Amazon ECR

on:
  push:       # 트리거
    branches:
      - main
      
env:
  AWS_REGION: ap-northeast-2        # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: gitaction            # set this to your Amazon ECR repository name
  ECS_CLUSTER: gitaction            # 클러스터 이름
  ECS_TASK_DEFINITION: fc-taskdef    # taskdef 이름
  ECS_CONTAINER_NAME: gitaction
  AWS_OIDC_AUTH : arn:aws:iam::866477832211:role/gitaction-role

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.AWS_OIDC_AUTH }} #OIDC 자격증명
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Download Task Def Template
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION}} \
          --query taskDefinition \
          > task-definition.json

    - name: echo my sts
      run : |
        aws sts get-caller-identity

    - name: Fill in the new image ID in the ECS Task Def
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECS_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        
    - name: cat file
      id: cat-file
      run :  |
        cat task-definition.json

    - name: Deploy Amazon ECS task def
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: ${{ env.ECS_CLUSTER }}
        
    - name: action-slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        author_name: Github Action # default: 8398a7@action-slack
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      if: always() # Pick up events even if the job fails or is canceled.

    - name: write build info
      run: |
        cat > build.txt <<EOF build.txt
        Build ID: ${{ github.run_id }} \
        Repo : ${{ github.action.repository }} \
        Actor : ${{ github.actor }} \
        API URL : ${{ github.api.url }} \
        SHA : ${{ github.sha }} \
        Trigger : ${{ github.triggering_actor }} \ 
        EOF

    - name: upload s3
      run: |
        aws s3 cp build.txt s3://dudududu/build.txt
     
        
